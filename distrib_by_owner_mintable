pragma solidity ^0.4.0;

/* Make it mintable
import "./mint.sol";
*/

/*
Feedback Notes / Internal Audit 1:
At least in one instance the contract violates the ERC20 specification (which maybe is not hugely problematic but if others depend on subtle behavior it could cause problems)
For example, the transfer function does not conform to the specification

“The function SHOULD throw if the _from account balance does not have enough tokens to spend.” (it only returns false if this is the case)

https://github.com/dappmind/abee/commit/bcf2be3dd326e93401341cc2843e12a4d3ec6461#diff-dfe8db5d7487432c8bedfb091eac6bc1R119
https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer

GitHub

Create distrib_by_owner_only · dappmind/XYZ@bcf2be3

This is for distribution by owner only

GitHub

ethereum/EIPs

EIPs - The Ethereum Improvement Proposal repository

The contract does not conform to the specification in transferFrom either

I would recommend that to look at the Vevue ERC20 contract and use the same structure as them

https://github.com/vevue/ICOcontracts

I didn’t find any vulnerability but feels safer to use a qrc20 implementation we know is correct
I also recommend running comprehensive tests on the testnet before release
*/

/* Internal Audit 2:
1. Line 84 - it would good to emit Transfer event to let explorers know that owner received total supply. 

2. Line 100 - function distributeABEE - it doesn't use safe math, it might cause integer underflow which will mess up owner balance if this method tries to transfer more tokens that owner actually have. In general SafeMath code is there but it's not used anywhere.

3. Line 114 - ERC20 short address attack mitigation is not required, it's better to leave this responsibility to client side apps, it was removed from Zeppelin Solidity: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/261">https://github.com/OpenZeppelin/openzeppelin-solidity/issues/261

4. Line 119 - transfer method - payload size is not required, SafeMath is not used.

5. Line 133 - transferFrom - payload size is not required, SafeMath is not used.

6. Line 159 - approve, race condition mitigation is not really necessary, it was removed from ZeppelinSolidity, there is warning only: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol#L45">https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol#L45 

General recommendations:
1. Use openzeppelin solidity: https://github.com/OpenZeppelin/openzeppelin-solidity 

2. Cover the contract with unit tests using truffle: https://github.com/trufflesuite/truffle 

3. Do another internal audit
*/

contract TVLRToken {
    function balanceOf(address _owner) public constant returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
}

contract ERC20Basic {
 
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);

}



contract ERC20 is ERC20Basic {

  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);

}

library SaferMath {
  function mulX(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function divX(uint256 a, uint256 b) internal constant returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}



contract TRAVELER is ERC20 {
    
    address owner = msg.sender;

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    
    //The Token is mintable, so this is just the initial number (200mil TVLR), 18 decimals
    uint256 public totalSupply = 200000000 * 10**18;

    function name() public constant returns (string) { return "TRAVELER"; }
    function symbol() public constant returns (string) { return "TVLR"; }
    function decimals() public constant returns (uint8) { return 18; }

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    event DistribFinished();

    bool public distributionFinished = false;

    modifier canDistr() {
    require(!distributionFinished);
    _;
    }

    function TRAVELER() public {
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }

    modifier onlyOwner { 
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }

    function getEthBalance(address _addr) constant public returns(uint) {
    return _addr.balance;
    }

    function distributeTVLR(address[] addresses, uint256 _value) onlyOwner canDistr public {
         for (uint i = 0; i < addresses.length; i++) {
             balances[owner] -= _value;
             balances[addresses[i]] += _value;
             emit Transfer(owner, addresses[i], _value);
         }
    }
    
    
    function balanceOf(address _owner) constant public returns (uint256) {
	 return balances[_owner];
    }

    // mitigates the ERC20 short address attack
    modifier onlyPayloadSize(uint size) {
        assert(msg.data.length >= size + 4);
        _;
    }
    
    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

         if (balances[msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(msg.sender, _to, _amount);
             return true;
         } else {
             return false;
         }
    }
    
    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {

         if (balances[_from] >= _amount
             && allowed[_from][msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]) {
             balances[_from] -= _amount;
             allowed[_from][msg.sender] -= _amount;
             balances[_to] += _amount;
             Transfer(_from, _to, _amount);
             return true;
         } else {
            return false;
         }
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success) {
        // mitigates the ERC20 spend/approval race condition
        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }
        
        allowed[msg.sender][_spender] = _value;
        
        Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }

    function finishDistribute() onlyOwner public returns (bool) {
    distributionFinished = true;
    DistribFinished();
    return true;
    }

    function withdrawTVLRTokens(address _tokenContract) public returns (bool) {
        require(msg.sender == owner);
        TVLRToken token = TVLRToken(_tokenContract);
        uint256 amount = token.balanceOf(address(this));
        return token.transfer(owner, amount);
    }


}
